const Logger = require('../logger/logger');
const ExecHelper = require('./exec_helper');
const VersionComparer = require('./version_comparer');


class NpmDependenciesHelper {

    static _getMaxVersion(versions) {
        let maxVersion = '0.0.0';
        for (const version of versions) {
            if (VersionComparer.compare(version, maxVersion) > 0) {
                maxVersion = version;
            }
        }

        return maxVersion;
    }

    static updateDependencies(dependencies = {}, options = {}) {

        const promises = [];
        const result = {};

        Object.keys(dependencies).forEach((module) => {
            // add here to ensure the right sequence in new object
            result[module] = dependencies[module];
            if (dependencies[module] === NpmDependenciesHelper.REPLACE_TOKEN) {
                const cmd = ['npm', 'show', `${module}@*`, 'version', '--json']

                if (options.debug) {
                    cmd.push('-dd');
                }
                const promise = ExecHelper.executeCommand(cmd)
                    .then((res) => {
                        const versions = JSON.parse(res.stdout.toString());
                        const maxVersion = this._getMaxVersion(versions);
                        result[module] = `^${maxVersion}`;
                        if (options.debug) {
                            Logger.warn(res.stderr);
                            Logger.debug(`${module}: ${result[module]}`);
                        }
                    })
                    .catch((err) => {
                        // hide stack trace
                        if(!options.quiet) {
                            Logger.warn(err.message);
                        }
                    });

                promises.push(promise);
            }
        });

        return Promise.all(promises).then(() => {
            return Promise.resolve(result);
        });
    }

}

NpmDependenciesHelper.REPLACE_TOKEN = '$LATEST';

module.exports = NpmDependenciesHelper;
