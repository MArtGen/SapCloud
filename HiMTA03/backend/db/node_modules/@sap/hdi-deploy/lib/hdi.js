'use strict';

/* jslint indent: 4 */
const logger = require('./logger.js');
const async = require('async');
const DeployTask = require('./tasks.js');
const {Container} = require('@sap/hdi');

const deployId = process.env.DEPLOY_ID || 'Deployment ID: none';

/**
 * Create a container object with the supplied credentials.
 *
 * @param {any} creds Credentials for the container.
 * @param {any} options Options, that can contain credentials as well.
 * @returns {Object} An object containing the credentials for a HANA connection.
 */
function prepareCredentials(creds, options) {
  const hdiCreds = {
    user: creds.hdi_user ? creds.hdi_user : creds.user,
    password: creds.hdi_user ? creds.hdi_password : creds.password,
  };

  if (Array.isArray(creds.db_hosts)) {
    hdiCreds.hosts = creds.db_hosts;
  } else {
    hdiCreds.host = creds.host;
    hdiCreds.port = creds.port;
  }

  if (creds.certificate) {
    hdiCreds.ca = Array.isArray(creds.certificate) ? creds.certificate : [creds.certificate];
    logger.trace('hdiCreds.ca set to', hdiCreds.ca);
  }

  hdiCreds.initializationTimeout = options.connectionTimeout;
  return hdiCreds;
}
// deploy hdi content
exports.deploy = function (options, creds, content, cb) {
  const hdiCreds = prepareCredentials(creds, options);
  const schema = `${creds.schema}#DI`;
  const container = new Container(creds.schema, hdiCreds, schema);

  const deployTask = new DeployTask(container, content, options, logger, creds.schema);

  const tasks = [
    ...deployTask.preprocessing(),
    ...deployTask.connect(),
    ...deployTask.lock(),
    ...deployTask.synchronize(),
    ...deployTask.make(),
    ...deployTask.deploy(),
    ...deployTask.unlock(),
  ];

  async.series(tasks, function (err, results) {
    if (err) {
      // err.message.replace: delete line breaks
      const message = err.message ? String(err.message) : `${  err}`;
      logger.error('Deployment to container %s failed - error: %s [%s].', creds.schema, message.replace(/(\r\n|\n|\r)/gm, ''), deployId);
    } else {
      logger.log('Deployment to container %s done [%s].', creds.schema, deployId);
    }

    // as last action, close the client
    deployTask.disconnect();
    cb(err, {
      task: 'deploy',
      results: results
    });
  });
};
